name: AI Update Pull Request

on:
  issue_comment:
    types: [created]

jobs:
  update-pr:
    if: ${{ github.event.issue.pull_request != null && contains(github.event.comment.body, '/ai-solve') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout PR branch using gh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr checkout ${{ github.event.issue.number }}

      - name: Print branches (debugging)
        run: git branch -a

      - name: Setup steps
        uses: ./.github/actions/setup-steps
        with:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          actor: ${{ github.actor }}

      - name: Extract PR information
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_BODY="${{ github.event.pull_request.body }}"
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_BODY=$PR_BODY" >> $GITHUB_ENV

      - name: Gather conversation history
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_COMMENTS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments --jq '.[].body')

          echo "Issue Title: ${{ github.event.issue.title }}" > CONVERSATION.txt
          echo "\nOriginal Issue Description:" >> CONVERSATION.txt
          echo "${{ github.event.issue.body }}" >> CONVERSATION.txt
          echo "\nConversation History:" >> CONVERSATION.txt
          touch last_comment.txt
          for comment in "${ISSUE_COMMENTS[@]}"; do
            echo "\n${comment}" >> CONVERSATION.txt
            echo "${comment}" > last_comment.txt
          done
          echo "\nDon't scrape urls unless you are asked explicitly." >> CONVERSATION.txt
          echo "LAST_COMMENT=$(cat last_comment.txt)" >> $GITHUB_ENV

      - name: Generate AI instructions
        uses: ./.github/actions/docker-run
        with:
          image: ghcr.io/nkyriazis/cv_builder:latest
          command: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} aider --model gpt-4o --yes-always --no-suggest-shell-commands --no-auto-commits --no-check-update --message-file CONVERSATION.txt | tee AIDER_OUTPUT.txt

      - name: Capture aider output
        run: |
          AIDER_OUTPUT=$(cat AIDER_OUTPUT.txt)
          echo "AIDER_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$AIDER_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit and push changes
        run: |
          git add . ':!CONVERSATION.txt' ':!AIDER_OUTPUT.txt' ':!last_comment.txt'
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "AI updates based on instructions"
            git push
          fi

      - name: Edit the body text
        uses: 1arp/create-a-file-action@0.4.5
        with:
          file: reply.txt
          content: |
            > ${{ env.LAST_COMMENT }}

            AI has updated the PR description.

      - name: Update PR description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            gh issue comment ${{ github.event.issue.number }} --body-file reply.txt
          fi
